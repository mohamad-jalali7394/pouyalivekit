export default {
  endpoints: {
    auth: {
      getToken: 'auth-service/getToken',
      logout: 'auth-service/auth/logout',
      refresh: 'auth-service/auth/refresh',
      sendVerificationCode: 'account-service/user/sendVerificationCode',
      confirmVerification: 'account-service/user/ConfirmVerificationCode',
      resetPassword: 'account-service/user/password/reset',
      changePassword: 'account-service/user/password/change'
    },
    scheduledMeeting: {
      getMySchedule: 'meeting/schedule/getMySchedule',
      getPrivateMeetingByUserId: 'meeting/privateInvited/getMyPrivateMeeting',
      create: 'meeting/schedule/create',
      getAllScheduleByUserId: 'meeting/schedule/getAllScheduleByUserId/',
      getAllScheduleByCustomerId:
          'meeting/schedule/getAllScheduleByCustomerId/',
      getAll: 'meeting/schedule/getAll',
      getById: 'meeting/schedule/getScheduleById/',
      update: 'meeting/schedule/update',
      cancelMeeting: 'meeting/schedule/canceledScheduleById/',
      getAllUsersTenantByCustomerId: 'admin/getAllUsersByCustomer/',
      getAllGroupsTenantByCustomerId: 'meeting/group/getAllGroupByCustomerId/',

    },
    meetingAttribute: {
      create:'meeting/meetingAttributes/create',
      update:'meeting/meetingAttributes/update',
      getByMeetingId:'meeting/meetingAttributes/getByMeetingId/',
      getMeetingInfo:'meeting/meetingAttributes/getMeetingInfo/',
    },
    test: {
      super: 'api/super/test'
    },
    user: {
      getMyInfo: 'account-service/user/getMyInfo',
      create: 'account-service/admin/createUser',
      update: 'account-service/admin/updateUser',
      getAll: 'account-service/admin/getAllUser',
      getAllUserInExcel: 'account-service/admin/getAllUserInExcel',
      getById: 'account-service/admin/getUserById/',
      delete: 'account-service/admin/deleteUser/',
      deleteSomeUsers: 'account-service/admin/deleteUsersById/',
      searchUserByUsername: 'account-service/admin/searchUser',
      search: 'account-service/admin/searchUser',
      createUserByExcel: 'account-service/admin/createUserByExcel/',
      deactiveUsers: 'account-service/admin/inActiveUsersById/',
      ConfirmVerificationCode: 'account-service/user/ConfirmVerificationCode/',
      updateAvatar: 'account-service/user/updateAvatar/',
      getAvatar: 'account-service/user/getAvatar/',
      deleteAvatar: 'account-service/user/deleteAvatar/',
      getAllUsersForVipCustomer: 'account-service/user/getAllUsersForVipCustomer/',
    },
    group: {
      create: 'meeting/group/create/',
      getAll: 'meeting/group/getAllGroup',
      getById: 'meeting/group/getGroupById/',
      update: 'meeting/group/update',
      delete: 'meeting/group/deleteGroup/'
    },
    invite: {
      getInvitedUsersByScheduleId: 'meeting/invited/getAllInvitedUserByScheduleId/',
      getInvited: 'meeting/privateInvited/getInvited/',
      modifyUserOfPublicRoom: 'meeting/invited/modifyUserOfScheduledMeeting/',
      getInvitedUsersPublicRoom: 'meeting/invited/getInvitedUsers/',
      removeInvitedUser: 'meeting/privateInvited/',
      getPassword: 'meeting/schedule/secret/',
      generateLink: 'meeting/schedule/generateLink/',
      getRoomInfo: 'meeting/schedule/getInfoMeeting/',
      getInvitedUserPhoto: 'meeting/invited/getInvitedUserPhoto/'
    },
    rooms: {
      getPassword: 'meeting/schedule/secret/',
      generateLink: 'meeting/schedule/generateLink/',
      getRoomInfo: 'meeting/schedule/getInfoMeeting/'
    },
    getPasswordProtection: {
      getPasswordProtectionPrivate: 'meeting/privateRoom/getPasswordProtection',
      getPasswordProtectionPublic: 'meeting/room/getPasswordProtection'
    },
    log: {
      getAll: 'log-service/log/getAll',
      getFailedLogHistory: 'log-service/log/getFailedLogHistory'
    },
    controlMeeting: {
      iWantToJoin: 'control-meeting/join/user/',
      rotation: 'control-meeting/in-meeting/rotation/',
      publisherList: 'control-meeting/meeting/publisherList/',
      iWantToJoinAsGuest: 'control-meeting/join/guest/',
      iWantToJoinPrivate: 'control-meeting/meeting/iWantToJoinPrivate/',
      iWantToJoinPrivateAsGuest: 'control-meeting/meeting/iWantToJoinPrivateAsGuest/',
      getSession: 'control-meeting/meeting/getSessionInfo/',
      openMic: 'control-meeting/in-meeting/openMic/',
      closeMic: 'control-meeting/in-meeting/closeMic/',
      openVideo: 'control-meeting/in-meeting/openVideo/',
      openShare: 'control-meeting/in-meeting/openShare/',
      closeShare: 'control-meeting/in-meeting/closeShare/',
      iWantToPublish: 'control-meeting/in-meeting/iWantToPublish/',
      iWantToLeave: 'control-meeting/in-meeting/iWantToLeave/',
      removeVideo: 'control-meeting/in-meeting/removeVideo/',
      closeCamera: 'control-meeting/in-meeting/closeCamera/',
      openCamera: 'control-meeting/in-meeting/closeCamera/',
      pin: 'control-meeting/in-meeting/pin/',
      unPin: 'control-meeting/in-meeting/unPin/',
      handraiseRequest: 'control-meeting/in-meeting/handraiseRequest/',
      handraiseResponse: 'control-meeting/in-meeting/handraiseResponse/',
      participantLeft: 'control-meeting/in-meeting/participantLeft/',
      publishList: 'control-meeting/in-meeting/publishList',
      enableSubstitutionModerator: 'control-meeting/in-meeting/enableSubstitutionModerator',
      disableSubstitutionModerator: 'control-meeting/in-meeting/disableSubstitutionModerator',
      getUserList: 'control-meeting/in-meeting/getUserList/',
      kickOut: 'control-meeting/in-meeting/kickOut',
      startRecording: 'control-meeting/recording/start',
      stopRecording: 'control-meeting/recording/stop',
      downloadRecordedFile: 'control-meeting/recording/download',
      getListOfRecordedFiles: 'control-meeting/recording/recordings',
      userInForGround: 'control-meeting/in-meeting/userInForeGround/',
      userInBackGround: 'control-meeting/in-meeting/userInBackGround/',
      streamRecordingFile: 'control-meeting/recording/stream',
      deleteRecordingFile: 'control-meeting/recording/delete',
      changeActiveSpeakerView: 'control-meeting/in-meeting/changeActiveSpeakerView',
    },
    privateRoom: {
      create: 'meeting/privateRoom/',
      getAllByOwnerUserId: 'meeting/privateRoom/getMyRoom/',
      getById: 'meeting/privateRoom/getById/',
      getRoomInfo: 'meeting/privateRoom/getInfo/',
      getInfoGuestPrivateRoom:'meeting/privateRoom/getInfoGuestPrivateRoom/',
      // getAllPrivateRoomByCustomerId: 'meeting/privateRoom/getAllForCustomerId/',
      getAll: 'meeting/privateRoom/',
      getAllByAdmin: 'meeting/privateRoom/getAllByAdmin',
      modifyUserOfPrivateRoom: 'meeting/privateInvited/inviteByEmails',
      inviteByPublicLink : 'meeting/privateInvited/inviteByPublicLink',
      generateNewPassword: 'meeting/privateRoom/updatePassword/',
      update: 'meeting/privateRoom/update/',
      active: 'meeting/privateRoom/enable/',
      deleteOrganization: 'meeting/privateInvited/',
      deleteGuest: 'meeting/privateInvited/guest/',
      assignPrivateRoom: 'meeting/privateRoom/assign',
      generateLink :'meeting/privateRoom/generateLink',
      inviteGuest:'meeting/privateRoom/generateLinkForPrivateMeeting/',
      inviteOrganizationalGuest:'meeting/privateInvited/invite/',
      getAllInvited:'meeting/privateInvited/getInvited/',
      terminate:'meeting/privateRoom/terminate',
      createPrivateRoomMeeting:'meeting/privateRoom/createPrivateRoomMeeting/',
    },
    userGroup: {
      addUser: 'meeting/group/user/addUserToGroup',
      removeUser: '/meeting/group/user/removeUserFromGroup',
      getAllUsersByGroupId: '/meeting/group/user/getAllUsersByGroupId',
      modifyUsersOfGroup: 'meeting/group/user/modifyUsersOfGroup/'
    },
    polling: {
      downloadExcel:'meeting/polling/getPollingResultInExcel/',
      createPolling: 'meeting/polling/createPolling',
      createSurvey: 'meeting/survey/createSurvey',
      submitComment: 'meeting/polling/submitComment',
      submitSurvey: 'meeting/survey/submitResult',
      getResultPolling: 'meeting/polling/getResultPolling/',
      getAllPolling: 'meeting/polling/getAllPolling/',
      getAllSurvey: 'meeting/survey/getAllSurveyByMeeting/',
      getResultSurvey:'meeting/survey/getResultSurvey/',
      getPDF:'meeting/survey/surveyResult/pdf?'
    },
    proceedings: {
      downloadPDF:'meeting/minutes/',
      createProceedings: 'meeting/minutes/',
      getProceedingsById: 'meeting/minutes/',
      submitProceedings: 'meeting/Proceedings/submitAgreement',
      getResultProceedings: 'meeting/Proceedings/getProceedingsResult/',
      getAllProceedings: 'meeting/Proceedings/getAllProceedings/',
      getResultProceedingsWithEntranceTime:'meeting/Proceedings/getProceedingsResultWithEntranceTime/',
      getMeetingMinutesSignResult:'meeting/minutes/getMeetingMinutesSignResult/',
      getPrivateMeetingMinutesSignResult:'meeting/minutes/getMeetingMinutesPrivateRoomMeetingSignResult/'
    },
    room: {
      create: 'meeting/room/create/',
      createRoomByCustomer:'meeting/room/createRoomByCustomer/',
      updateRoomByCustomer:'meeting/room/updateRoomByCustomer/',
      getAllRoomByCustomerId: 'meeting/room/getAllRoomByCustomerId/',
      getAllRoomByCustomerIdAndPlanId: 'meeting/room/getAllRoomByCustomerIdAndPlanId/',
      getAll: 'meeting/room/getAllRoom',
      getById: 'meeting/room/getRoomById/',
      update: 'meeting/room/update/',
      delete: 'meeting/room/deleteRoom/',
      generateLink: 'meeting/schedule/generateLink',
      generateNewPassword: 'meeting/schedule/updatePassword',
      deleteRoom: 'meeting/room/deleteRoomByCustomer/'
    },
    billing: {
      create: 'account-service/customerBillingPlan/create',
      update: 'account-service/customerBillingPlan/update',
      getCustomerBillingPlanByCustomerId: 'account-service/customerBillingPlan/getCustomerBillingPlanByCustomerId/',
      getBillingPlanById: 'account-service/customerBillingPlan/getBillingPlanById/',
      getContract: 'account-service/customerBillingPlan/getContract/'
    },
    report: {
      getReportForSuper: 'meeting/report',
      getReportForSupport: 'meeting/report/support',
      getAllReportInExcel: 'meeting/report/reportExcel',
      getAllBriefReportInExcel: 'meeting/report/reportBriefExcel',
      getAllReportInExcelById: 'meeting/report/reportExcelByMeetingId/'
    },
    ldapSettings: {
      update: 'auth-service/ldap/updateConfig/',
      create: 'auth-service/ldap/createConfig/',
      getAll: 'auth-service/ldap/getAll',
      getByCustomerId: 'auth-service/ldap/getLdapConfigByCustomerId/',
      getById: 'auth-service/ldap/getLdapConfigById/',
      sync: 'account-service/ldap/sync/',
      getLdapSyncErrors: 'account-service/ldap/getLdapSyncError/',
      getLdapPicture: 'auth-service/ldap/picture/',

    },
    setting: {
      getSetting: 'meeting/setting/getMySetting',
      updateSetting: 'meeting/setting/update',
      createSetting: 'meeting/setting/createSettingFromDefault/',
      resetSetting: 'meeting/setting/resetSettingAsDefault'
    },

    agenda: {
      agenda: 'meeting/meetingAgenda/',
    },
    customer: {
      create: 'account-service/customer/create',
      update: 'account-service/customer/update',
      getAll: 'account-service/customer/getAll',
      getById: 'account-service/customer/getCustomerById/',
      delete: 'account-service/customer/delete',
      otp: 'account-service/customer/getOtpForChangeStatus',
      otpPerge: 'account-service/verification/send',
      changeStatus: 'account-service/customer/changeStatusCustomer'
    },
  },
  http_request_general_timeout: 20000,
  http_request_search_timeout: 15000,
  table_count_by_page_default: 10
}
